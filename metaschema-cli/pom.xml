<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>dev.metaschema.java</groupId>
		<artifactId>metaschema-framework</artifactId>
		<version>2.2.0-SNAPSHOT</version>
	</parent>

	<artifactId>metaschema-cli</artifactId>

	<name>Metaschema Command Line Tool</name>
	<description>A simple command line tool supporting common Metaschema
		operations.</description>

	<url>${site.url}/${project.artifactId}/</url>

	<distributionManagement>
		<site>
			<id>pages</id>
			<url>${site.url}/${project.artifactId}/</url>
		</site>
	</distributionManagement>

	<scm>
		<url>${scm.url}/tree/develop/metaschema-cli</url>
	  <tag>HEAD</tag>
  </scm>

	<dependencies>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>cli-processor</artifactId>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>metaschema-schema-generator</artifactId>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>metaschema-databind</artifactId>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>metaschema-databind-modules</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
		</dependency>

		<dependency>
		    <groupId>io.github.hakky54</groupId>
		    <artifactId>logcaptor</artifactId>
		    <scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<scope>test</scope>
		</dependency>			
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
			<resource>
				<directory>src/main/distro</directory>
				<filtering>true</filtering>
				<targetPath>${project.build.directory}/generated-distro</targetPath>
			</resource>
			<resource>
				<directory>${project.build.directory}/generated-resources/license</directory>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>appassembler-maven-plugin</artifactId>
				<configuration>
					<programs>
						<program>
							<mainClass>gov.nist.secauto.metaschema.cli.CLI</mainClass>
							<id>metaschema-cli</id>
						</program>
					</programs>
					<generateRepository>false</generateRepository>
					<repositoryLayout>flat</repositoryLayout>
					<repositoryName>lib</repositoryName>
					<outputFileNameMapping>@{groupId}@.@{artifactId}@-@{version}@@{dashClassifier?}@.@{extension}@</outputFileNameMapping>
					<extraJvmArguments>-Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8</extraJvmArguments>
					<projectArtifactFirstInClassPath>true</projectArtifactFirstInClassPath>
					<includeConfigurationDirectoryInClasspath>false</includeConfigurationDirectoryInClasspath>
				</configuration>
				<executions>
					<execution>
						<id>exec-cli-windows</id>
						<phase>package</phase>
						<goals>
							<goal>assemble</goal>
						</goals>
						<configuration>
							<useWildcardClassPath>true</useWildcardClassPath>
							<platforms>windows</platforms>
						</configuration>
					</execution>
					<execution>
						<id>exec-cli-bash</id>
						<phase>package</phase>
						<goals>
							<goal>assemble</goal>
						</goals>
						<configuration>
							<platforms>unix</platforms>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<mainClass>gov.nist.secauto.metaschema.cli.CLI</mainClass>
							<addClasspath>true</addClasspath>
							<!-- <classpathPrefix>lib/</classpathPrefix> -->
							<classpathLayoutType>custom</classpathLayoutType>
							<customClasspathLayout>${artifact.groupId}.${artifact.artifactId}-$${artifact.version}.${artifact.extension}</customClasspathLayout>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<dependencies>
					<dependency>
						<groupId>gov.nist.secauto.swid</groupId>
						<artifactId>swid-maven-plugin</artifactId>
						<version>0.7.0</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<id>make-assembly-bin</id> <!-- this is used for inheritance merges -->
						<phase>package</phase> <!-- bind to the packaging phase -->
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptors>
								<descriptor>src/main/assembly/bin.xml</descriptor>
							</descriptors>
							<tarLongFileMode>posix</tarLongFileMode>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>2.5.0</version>
				<executions>
					<execution>
						<id>third-party-license</id>
						<goals>
							<goal>add-third-party</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/generated-distro</outputDirectory>
							<thirdPartyFilename>LICENSE-THIRD-PARTY.txt</thirdPartyFilename>
							<licenseMerges>
								<licenseMerge>The Apache Software License, Version 2.0|Apache
									License, Version 2.0|Apache Public License 2.0</licenseMerge>
							</licenseMerges>
							<excludedGroups>^gov\.nist\.</excludedGroups>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>${project.groupId}</groupId>
				<artifactId>metaschema-maven-plugin</artifactId>
				<version>${project.version}</version>
				<executions>
					<execution>
						<id>metaschema-json-schemagen</id>
						<goals>
							<goal>generate-schemas</goal>
						</goals>
						<configuration>
							<metaschemaDir>${project.basedir}/../core/metaschema/schema/metaschema</metaschemaDir>
							<outputDirectory>${project.build.directory}/generated-resources/metaschema/schema/json</outputDirectory>
							<includes>
								<include>metaschema-module-metaschema.xml</include>
							</includes>
							<constraints>
								<constraint>${project.basedir}/../core/metaschema/schema/metaschema/metaschema-module-constraints.xml</constraint>
							</constraints>
							<formats>
								<format>json</format>
							</formats>
						</configuration>
					</execution>
					<execution>
						<id>metaschema-xsd-schemagen</id>
						<goals>
							<goal>generate-schemas</goal>
						</goals>
						<configuration>
							<metaschemaDir>${project.basedir}/../core/metaschema/schema/metaschema</metaschemaDir>
							<outputDirectory>${project.build.directory}/generated-resources/metaschema/schema/xml</outputDirectory>
							<includes>
								<include>metaschema-module-metaschema.xml</include>
							</includes>
							<constraints>
								<constraint>${project.basedir}/../core/metaschema/schema/metaschema/metaschema-module-constraints.xml</constraint>
							</constraints>
							<formats>
								<format>xsd</format>
							</formats>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>add-schema-resources</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>add-resource</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<directory>${project.build.directory}/generated-resources/metaschema</directory>
									<includes>
										<include>**/*.xsd</include>
										<include>**/*.json</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>
</project>
