/*
 * SPDX-FileCopyrightText: none
 * SPDX-License-Identifier: CC0-1.0
 */

package gov.nist.secauto.metaschema.core.testing.model.mocking;

import gov.nist.secauto.metaschema.core.mdm.IDMAssemblyNodeItem;
import gov.nist.secauto.metaschema.core.mdm.IDMDocumentNodeItem;
import gov.nist.secauto.metaschema.core.mdm.IDMFieldNodeItem;
import gov.nist.secauto.metaschema.core.mdm.IDMFlagNodeItem;
import gov.nist.secauto.metaschema.core.mdm.IDMRootAssemblyNodeItem;
import gov.nist.secauto.metaschema.core.metapath.item.atomic.IStringItem;
import gov.nist.secauto.metaschema.core.model.IAssemblyDefinition;
import gov.nist.secauto.metaschema.core.model.IAssemblyInstance;
import gov.nist.secauto.metaschema.core.model.IFieldInstance;
import gov.nist.secauto.metaschema.core.model.IFlagDefinition;
import gov.nist.secauto.metaschema.core.model.IFlagInstance;
import gov.nist.secauto.metaschema.core.model.ISource;
import gov.nist.secauto.metaschema.core.qname.IEnhancedQName;
import gov.nist.secauto.metaschema.core.testing.model.MockedModelTestSupport;
import gov.nist.secauto.metaschema.core.util.ObjectUtils;

import java.net.URI;

import edu.umd.cs.findbugs.annotations.NonNull;

/**
 * Supports generating a simple Metapath node item-based document model for use
 * in unit tests.
 */
public class MockedDocumentGenerator {
  /**
   * The document base URI used by documents generated by the
   * {@link #generateDocumentNodeItem()} method.
   */
  @NonNull
  public static final URI BASE_URI = ObjectUtils.notNull(URI.create("https://example.com/resource"));
  /**
   * The namespace used by Metaschema module definitions generated by the
   * {@link #generateDocumentNodeItem()} method.
   */
  @NonNull
  public static final String NS = "http://example.com/ns";
  /**
   * The qualified name for the root node ({@code /Q{http://example.com/ns}root})
   * of a document generated by the {@link #generateDocumentNodeItem()} method.
   */
  @NonNull
  public static final IEnhancedQName ROOT_QNAME = IEnhancedQName.of(NS, "root");
  /**
   * The qualified name for the assembly child node
   * ({@code /Q{http://example.com/ns}root/Q{http://example.com/ns}assembly}) of a
   * document generated by the {@link #generateDocumentNodeItem()} method.
   */
  @NonNull
  public static final IEnhancedQName ASSEMBLY_QNAME = IEnhancedQName.of(NS, "assembly");
  /**
   * The qualified name for the field child node
   * ({@code /Q{http://example.com/ns}root/Q{http://example.com/ns}field}) of a
   * document generated by the {@link #generateDocumentNodeItem()} method.
   */
  @NonNull
  public static final IEnhancedQName FIELD_QNAME = IEnhancedQName.of(NS, "field");
  /**
   * The qualified name for the flag child node
   * ({@code /Q{http://example.com/ns}root/Q{http://example.com/ns}assembly/@field-flag})
   * of a document generated by the {@link #generateDocumentNodeItem()} method.
   */
  @NonNull
  public static final IEnhancedQName ASSEMBLY_FLAG_QNAME = IEnhancedQName.of("assembly-flag");
  /**
   * The qualified name for the flag child node
   * ({@code /Q{http://example.com/ns}root/Q{http://example.com/ns}field/@field-flag})
   * of a document generated by the {@link #generateDocumentNodeItem()} method.
   */
  @NonNull
  public static final IEnhancedQName FIELD_FLAG_QNAME = IEnhancedQName.of("field-flag");
  /**
   * The qualified name for the flag node ({@code /Q{http://example.com/ns}flag})
   * of a document generated by the {@link #generateDocumentNodeItem()} method.
   */
  @NonNull
  public static final IEnhancedQName FLAG_QNAME = IEnhancedQName.of("flag");

  /**
   * Generate a simple Metaschema-based document model.
   *
   * @return the document node item for this model
   */
  public static IDMDocumentNodeItem generateDocumentNodeItem() {
    MockedModelTestSupport mocking = new MockedModelTestSupport();

    ISource moduleSource = ISource.externalSource("https://example.com/module");

    IAssemblyDefinition rootDefinition = mocking.assembly()
        .qname(ROOT_QNAME)
        .rootQName(ROOT_QNAME)
        .source(moduleSource)
        .toDefinition();
    IAssemblyInstance assemblyInstance = mocking.assembly()
        .qname(ASSEMBLY_QNAME)
        .source(moduleSource)
        .toInstance(rootDefinition);
    IFlagInstance assemblyFlag = mocking.flag()
        .qname(ASSEMBLY_FLAG_QNAME)
        .source(moduleSource)
        .toInstance(assemblyInstance.getDefinition());
    IFieldInstance fieldInstance = mocking.field()
        .qname(FIELD_QNAME)
        .source(moduleSource)
        .toInstance(rootDefinition);
    IFlagInstance fieldFlag = mocking.flag()
        .qname(FIELD_FLAG_QNAME)
        .source(moduleSource)
        .toInstance(fieldInstance.getDefinition());

    IDMDocumentNodeItem document = IDMDocumentNodeItem.newInstance(
        BASE_URI,
        rootDefinition);
    IDMRootAssemblyNodeItem root = document.getRootAssemblyNodeItem();
    IDMAssemblyNodeItem assembly = root.newAssembly(assemblyInstance);
    assembly.newFlag(assemblyFlag, IStringItem.valueOf("assembly-flag"));
    IDMFieldNodeItem field = root.newField(fieldInstance, IStringItem.valueOf("field"));
    field.newFlag(fieldFlag, IStringItem.valueOf("field-flag"));
    return document;
  }

  /**
   * Generate a simple Metaschema-based document model.
   *
   * @return the document node item for this model
   */
  public static IDMFlagNodeItem generateOrphanedFlagNodeItem() {
    MockedModelTestSupport mocking = new MockedModelTestSupport();

    ISource moduleSource = ISource.externalSource("https://example.com/module");

    IFlagDefinition flagDefinition = mocking.flag()
        .qname(FLAG_QNAME)
        .source(moduleSource)
        .toDefinition();

    return IDMFlagNodeItem.newInstance(flagDefinition, IStringItem.valueOf("flag"), moduleSource.getStaticContext());
  }

  private MockedDocumentGenerator() {
    // disable construction
  }
}
