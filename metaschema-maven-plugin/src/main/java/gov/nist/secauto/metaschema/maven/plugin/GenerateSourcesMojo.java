/*
 * SPDX-FileCopyrightText: none
 * SPDX-License-Identifier: CC0-1.0
 */

package gov.nist.secauto.metaschema.maven.plugin;

import gov.nist.secauto.metaschema.core.model.IModule;
import gov.nist.secauto.metaschema.core.util.ObjectUtils;
import gov.nist.secauto.metaschema.databind.codegen.IProduction;
import gov.nist.secauto.metaschema.databind.codegen.JavaGenerator;
import gov.nist.secauto.metaschema.databind.codegen.config.DefaultBindingConfiguration;

import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import edu.umd.cs.findbugs.annotations.NonNull;

/**
 * Goal which generates Java source files for a given set of Metaschema modules.
 */
@Mojo(name = "generate-sources", defaultPhase = LifecyclePhase.GENERATE_SOURCES)
public class GenerateSourcesMojo
    extends AbstractMetaschemaMojo {
  private static final String STALE_FILE_NAME = "generateSourcesStaleFile";

  /**
   * A set of binding configurations.
   */
  @Parameter
  protected File[] configs;

  /**
   * <p>
   * Gets the last part of the stale filename.
   * </p>
   * <p>
   * The full stale filename will be generated by pre-pending
   * {@code "." + getExecution().getExecutionId()} to this staleFileName.
   *
   * @return the stale filename postfix
   */
  @Override
  protected String getStaleFileName() {
    return STALE_FILE_NAME;
  }

  /**
   * Retrieve a list of binding configurations.
   *
   * @return the collection of binding configurations
   */
  protected List<File> getConfigs() {
    List<File> retval;
    if (configs == null) {
      retval = Collections.emptyList();
    } else {
      retval = Arrays.asList(configs);
    }
    return retval;
  }

  /**
   * Generate the Java source files for the provided Metaschemas.
   *
   * @param modules
   *          the collection of Metaschema modules to generate sources for
   * @throws MojoExecutionException
   *           if an error occurred while generating sources
   */
  @Override
  @NonNull
  protected List<File> generate(@NonNull Set<IModule> modules) throws MojoExecutionException {
    DefaultBindingConfiguration bindingConfiguration = new DefaultBindingConfiguration();
    for (File config : getConfigs()) {
      try {
        if (getLog().isInfoEnabled()) {
          getLog().info("Loading binding configuration: " + config.getPath());
        }
        bindingConfiguration.load(config);
      } catch (IOException ex) {
        throw new MojoExecutionException(
            String.format("Unable to load binding configuration from '%s'.", config.getPath()), ex);
      }
    }

    IProduction production;
    try {
      if (getLog().isInfoEnabled()) {
        getLog().info("Generating Java classes in: " + getOutputDirectory().getPath());
      }
      production = JavaGenerator.generate(
          modules,
          ObjectUtils.notNull(getOutputDirectory().toPath()),
          bindingConfiguration);
    } catch (IOException ex) {
      throw new MojoExecutionException("Creation of Java classes failed.", ex);
    }

    // add generated sources to Maven
    try {
      getMavenProject().addCompileSourceRoot(getOutputDirectory().getCanonicalFile().getPath());
    } catch (IOException ex) {
      throw new MojoExecutionException("Unable to add output directory to maven sources.", ex);
    }

    return ObjectUtils.notNull(production.getGeneratedClasses()
        .map(gen -> gen.getClassFile().toFile())
        .collect(Collectors.toUnmodifiableList()));
  }
}
